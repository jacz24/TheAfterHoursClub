{"version":3,"sources":["scripts/misc/consts.ts","scripts/landing/ts/landingP.ts","scripts/landing/tsx/landingPage.tsx","scripts/client/ts/serviceWorker.ts"],"names":["loadingGIFURL","getDynamicData","console","log","fetch","proxyurl","then","response","text","contents","dynamicdata","jsonResponse","JSON","parse","ip","port","url","minecraftip","mcport","responseText","mcstatus","fullip","mcplayers","toString","element","title","value","valueStyle","color","prefix","ArrowDownOutlined","suffix","status","document","getElementById","ReactDOM","render","ArrowUpOutlined","renderMCStatus","catch","renderMCOnlineOrNot","REST","terrariaip","terrariaport","ok","Error","json","playerRatio","Content","myjson","stringify","renderTerrariaPlayerRatio","className","error","renderTerrariaOnlineOrNot","updateDynamicData","Header","Layout","Footer","LandingPage","style","backgroundColor","padding","gutter","span","id","alt","width","src","display","justifyContent","textAlign","Boolean","window","location","hostname","match","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.50caafe3.chunk.js","sourcesContent":["\r\nexport const minecraftcardimgURL = \"https://raw.githubusercontent.com/jacz24/TheAfterHoursClub/main/assets/images/minecraftbg.png\"\r\nexport const terrariacardimgURL = \"https://raw.githubusercontent.com/jacz24/TheAfterHoursClub/main/assets/images/terrariatree.gif\"\r\nexport const loadingGIFURL = \"https://raw.githubusercontent.com/jacz24/TheAfterHoursClub/main/assets/images/loading.gif\"\r\n\r\nexport const mcstatusAPIURL = \"https://eu.mc-api.net/v3/server/ping/\"\r\nexport const pastebinURL = \"https://pastebin.com/raw/0JhvfaUA\" // URL TO DYANMIC DATA ON PASTEBIN FOR EASY CHANGE","import {Statistic} from \"antd\";\r\nimport {ArrowDownOutlined, ArrowUpOutlined} from \"@ant-design/icons\";\r\nimport ReactDOM from \"react-dom\";\r\nimport React from \"react\";\r\nimport {\r\n    proxyurl,\r\n    renderMCOnlineOrNot,\r\n    renderTerrariaOnlineOrNot,\r\n    renderTerrariaPlayerRatio, terrariaip, TshockREST\r\n} from \"../tsx/landingPage\";\r\nimport {pastebinURL} from \"../../misc/consts\";\r\n\r\n\r\nexport function xhrcheckMCStatus(ip: any, port: any) {\r\n    var data = null;\r\n\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.withCredentials = true;\r\n\r\n    xhr.addEventListener(\"readystatechange\", function (){\r\n       if (this.readyState === this.DONE) {\r\n           console.log(this.responseText);\r\n           return this.responseText;\r\n       }\r\n    });\r\n    xhr.open(\"GET\", \"https://eu.mc-api.net/v3/server/ping/142.114.210.26%3A25565\"); // TODO ADD CUSTOM URL\r\n\r\n    xhr.send(data);\r\n\r\n    //'play.earthmc.net', 25565\r\n    //'142.114.210.26',25565 Current IP, TODO ADD AUTO GET NEW IP!\r\n    //status('ip', port, (response: any) => {\r\n         //   console.log(response)\r\n        //    return (response)\r\n       // }\r\n   // )\r\n}\r\n\r\nexport function handleErrors(response: { ok: any; statusText: string | undefined;}) {\r\n    if (!response.ok) {\r\n        throw Error(response.statusText);\r\n    }\r\n    return response;\r\n}\r\n\r\nexport function getDynamicData(){\r\n\r\n    console.log('Getting Dynamic Data')\r\n\r\n\r\n    fetch(proxyurl + pastebinURL)\r\n        .then(response => response.text())\r\n        .then(contents => {\r\n                updateDynamicData(contents)\r\n    }\r\n        )\r\n        .catch(() => console.log(\"Can’t access \" + proxyurl + pastebinURL + \" response. Blocked by browser?\"))\r\n\r\n\r\n}\r\nexport function updateDynamicData(dynamicdata: string){\r\n    console.log(dynamicdata);\r\n    var jsonResponse = JSON.parse(dynamicdata);\r\n    renderMCOnlineOrNot(jsonResponse[\"MinecraftIP\"], jsonResponse[\"MinecraftPort\"]);\r\n    renderTerrariaOnlineOrNot(jsonResponse[\"TerrariaIP\"], jsonResponse[\"TerrariaPort\"], jsonResponse[\"TshockREST\"]);\r\n    //renderDayzOnlineOrNot(jsonResponse[\"DayzIP\"], jsonResponse[\"DayzPort\"]);\r\n}\r\n\r\nexport function loadDynamicData(){\r\n\r\n}","import ReactDOM from \"react-dom\";\r\nimport React from \"react\";\r\nimport {\r\n    Button,\r\n    Checkbox,\r\n    Col,\r\n    Form,\r\n    Input,\r\n    Row,\r\n    Space,\r\n    Carousel,\r\n    Breadcrumb,\r\n    Menu,\r\n    Statistic,\r\n    Card,\r\n    Layout\r\n} from \"antd\";\r\nimport {layout, login, loginFailed, tailLayout} from \"../../login/ts/login\";\r\nimport {terrariacardimgURL, minecraftcardimgURL, mcstatusAPIURL, loadingGIFURL} from \"../../misc/consts\";\r\nimport {EyeInvisibleOutlined, EyeTwoTone, ArrowUpOutlined, ArrowDownOutlined} from \"@ant-design/icons\";\r\nimport {updateDynamicData, getDynamicData, loadDynamicData, handleErrors} from \"../ts/landingP\";\r\nimport '../css/landing.css';\r\nimport {pixi} from \"../../poker/ts/pokerLogic\";\r\nimport {logCounter, quickNavSetup} from \"../../lobby/tsx/lobbyUI\";\r\nimport * as navBar from '../../TopNavBar/tsx/topNavBar';\r\n\r\nexport const proxyurl = \"https://cors-anywhere.herokuapp.com/\"\r\n\r\nexport let mainip: string = \"\"\r\n\r\nexport let minecraftip = \"\"\r\nexport let mcport = \"\"\r\n\r\nexport let terrariaip = \"\"\r\nexport let terrariaport =\"\"\r\nexport let TshockREST = \"\"\r\n\r\nexport let dayzip = \"\"\r\nexport let dayzport = \"\"\r\n\r\nconst { Header, Content, Footer } = Layout;\r\n\r\nconst LandingPage = () => {\r\n    return (\r\n        //style={{display: 'flex', justifyContent: 'center', background: 'red'}}\r\n        <div  className=\"LandingPage\" style={{backgroundColor: \"#282c34\"}}>\r\n            <Layout className=\"layout\">\r\n                <Header>\r\n\r\n                    <div className=\"logo\">\r\n\r\n                    navBar.renderTopNavBar()\r\n                    </div>\r\n                </Header>\r\n                <Content style={{ padding: '0 50px' }}>\r\n\r\n                    <div className=\"site-layout-content\">{renderServerStatues()}</div>\r\n\r\n                </Content>\r\n                <Footer style={{ textAlign: 'center' }}>Diji-Docs & Ant Design ©2020 Created by Max Irwin</Footer>\r\n            </Layout>\r\n\r\n\r\n        </div>)\r\n}\r\n\r\nfunction renderServerStatues(){ // Renders nice cards to show status of game servers\r\n    return (<div  className=\"ServerStatusList\">\r\n\r\n            {renderMCcard()}\r\n            {renderTerrariacard()}\r\n\r\n            {getDynamicData()}\r\n\r\n    </div>\r\n    )\r\n}\r\n//\r\n\r\nexport function renderTerrariaOnlineOrNot(ip: string, port: string, REST: string){ // TRY REST API I SUPPOSE!\r\n    //  CURRENTLY WITH NO WEB API TO CHECK STATUS WE MUST RESORT TO OUR OWN DYNAMIC DATA\r\n    // IF THE MC SERVER IS ON AND OUR DATA SAYS terraria is enabled on startup then it must be on right!?!\r\n    // TODO ADD STATUS GRABBER TO BE AUTOMATIC FROM IP RESOLVE\r\n    terrariaip = ip\r\n    terrariaport = port\r\n    TshockREST = REST\r\n    const url = \"http://\" + terrariaip + \":\" + TshockREST + \"/status\" // Creates combined url\r\n    var fullip = terrariaip + \":\" + terrariaport\r\n    console.log(\"Getting Terraria Server Status\")\r\n    fetch(proxyurl + url)\r\n        .then(response => {\r\n\r\n\r\n            if (!response.ok){\r\n\r\n                console.log(\"Terraria Server Is Down!\")\r\n                let element =\r\n                    <Statistic\r\n                        title={\"Terraria Server Status: \" + terrariaip + \":\" + terrariaport}\r\n                        value={' Currently Offline'}\r\n                        valueStyle={{ color: '#cf1322' }}\r\n                        prefix={<ArrowDownOutlined />}\r\n                        suffix=\"!\"\r\n                    />\r\n\r\n                let status = document.getElementById('Terrariastatus')\r\n                ReactDOM.render(element, status)\r\n\r\n                throw new Error('Network response was not ok');\r\n\r\n            } else{\r\n                response.json().then(contents => {\r\n                    let playerRatio = renderTerrariaPlayerRatio(contents)\r\n                    console.log(\"Terraria Server Is Up , rendering status!\");\r\n                    let element =\r\n                        <strong>\r\n                        <Statistic className=\"TerrariaStatus\"\r\n                                   title={\"Terraria Server Status: \" + fullip}\r\n                                   value={' Currently Online'}\r\n                                   valueStyle={{ color: '#3f8600' }}\r\n                                   prefix={<ArrowUpOutlined />}\r\n                                   suffix={\"! \" + playerRatio} />\r\n                                   </strong>\r\n//+ <div id=\"TshockPlayerRatio\">Player Count</div>\r\n                    let status = document.getElementById('Terrariastatus')\r\n                    ReactDOM.render(element, status)\r\n                })\r\n\r\n            }\r\n\r\n            //response.json().then(function (result){\r\n             //   Promise.resolve(result).then(JSON.parse).then(renderTerrariaPlayerRatio)\r\n            //})\r\n        })\r\n        .catch(function(error) {});\r\n    //.then(response => response.text())\r\n    //         .then(contents => renderMCStatus(contents))\r\n    //         .catch(() => console.log(\"Can’t access \" + url + \" response. Blocked by browser?\"))\r\n\r\n}\r\n\r\nexport function renderTerrariaPlayerRatio(Content: string){\r\n    var myjson = JSON.stringify(Content)\r\n    //console.log(myjson)\r\n    var json = JSON.parse(myjson)\r\n    return (json[\"playercount\"] + \"/\" + json[\"maxplayers\"])\r\n    //console.log(json[\"playercount\"] + \"/\" + json[\"maxplayers\"])\r\n    //const element = <h1>Hello, world</h1>;\r\n    //ReactDOM.render(element, document.getElementsByClassName('TshockPlayerRatio'))\r\n    //\"playercount\":0,\"maxplayers\":8\r\n}\r\n/*\r\n.then(response => response.text())\r\n        .then(contents => renderMCStatus(contents))\r\n.then(response => response.text())\r\n        .then(contents => renderTerrariaStatus(contents.toString()))\r\n        .catch(() => console.log(\"Can’t access \" + url + \" response. Blocked by browser?\"))\r\n */\r\n\r\nfunction renderTerrariacard(){\r\n    return (\r\n        <strong>\r\n            <div className=\"terraria-statistic\" style={{display: 'stretch', justifyContent: 'auto'}}>\r\n                <Row gutter={16}>\r\n                    <Col span={12}>\r\n                        <Card>\r\n                            <div id='Terrariastatus'>\r\n                                Terraria Server Status:\r\n                            <img alt=\"Terrarialoading\" width=\"24%\" src={loadingGIFURL} />\r\n                            </div>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        </strong>\r\n    );\r\n}\r\n\r\nfunction renderMCcard(){\r\n    return (\r\n        <strong>\r\n        <div className=\"mc-statistic\">\r\n            <Row gutter={16}>\r\n                <Col span={12}>\r\n                    <Card>\r\n                        <div id='MCstatus'>\r\n                            Minecraft Server Status:\r\n                            <img alt=\"MCloading\" width=\"24%\" src={loadingGIFURL} />\r\n                        </div>\r\n\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n        </strong>\r\n    );\r\n}\r\n\r\n\r\nexport function renderMCOnlineOrNot(ip: string, port: string){ // TODO ADD AUTO GET NEW IP AND ADD EXTRA SERVER STATS\r\n    // TODO ADD RETURNS TO FUNCTION WITH 0-1, Off, ON\r\n\r\n    //const url = \"https://eu.mc-api.net/v3/server/ping/142.114.210.26%3A25565\"\r\n    const url = mcstatusAPIURL + ip + \"%3A\" + port\r\n\r\n    minecraftip = ip\r\n    mcport = port\r\n\r\n\r\n    fetch(proxyurl + url)\r\n        .then(response => response.text())\r\n        .then(contents => renderMCStatus(contents))\r\n        .catch(() => console.log(\"Can’t access \" + url + \" response. Blocked by browser?\"))\r\n\r\n}\r\nfunction renderMCStatus(responseText: string){\r\n    var jsonResponse = JSON.parse(responseText)\r\n    console.log(responseText)\r\n    var mcstatus = jsonResponse[\"online\"]\r\n    const fullip = minecraftip + \":\" + mcport;\r\n    var mcplayers = jsonResponse[\"players\"]\r\n    if(mcstatus.toString() === \"false\"){\r\n        console.log(\"MC Server Is Down, Telling User!\");\r\n        let element =\r\n            <Statistic\r\n                title={\"RLcraft Server Status: \" + fullip}\r\n                value={' Currently Offline'}\r\n                valueStyle={{ color: '#cf1322' }}\r\n                prefix={<ArrowDownOutlined />}\r\n                suffix=\"!\" />\r\n\r\n        let status = document.getElementById('MCstatus')\r\n        ReactDOM.render(element, status)\r\n    } else {\r\n        console.log(\"MC Server Is Up!\")\r\n        let element =\r\n            <Statistic\r\n                title={\"RLcraft Server Status: \" + fullip}\r\n                value={' Currently Online'}\r\n                valueStyle={{ color: '#3f8600' }}\r\n                prefix={<ArrowUpOutlined />}\r\n                suffix={\"! \" + mcplayers[\"online\"] + \"/\" +  mcplayers[\"max\"]}\r\n            />\r\n\r\n        let status = document.getElementById('MCstatus')\r\n        ReactDOM.render(element, status)\r\n    }\r\n}\r\n\r\nexport function renderLanding(){ // Starts the landing page!\r\n    ReactDOM.render(\r\n        <React.StrictMode>\r\n            <LandingPage />\r\n        </React.StrictMode>,\r\n        document.getElementById('landing')\r\n    );\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n"],"sourceRoot":""}